import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/voucher.dart';

class FirebaseVoucherService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final String _collection = 'vouchers';

  // ========================================
  // ADMIN: Cr√©er un voucher
  // ========================================
 Future<String> createVoucher({
  required String code,
  required int heures,
  required DateTime dateExpiration,
}) async {
  try {
    print('üîµ VOUCHER: Cr√©ation code $code...');

    // V√©rifier que le code n'existe pas d√©j√†
    final existing = await _firestore
        .collection(_collection)
        .where('code', isEqualTo: code.toUpperCase())
        .get();

    if (existing.docs.isNotEmpty) {
      throw Exception('Ce code voucher existe d√©j√†');
    }

    // Utiliser DateTime.now() au lieu de serverTimestamp
    final now = DateTime.now();
    
    final docRef = await _firestore.collection(_collection).add({
      'code': code.toUpperCase(),
      'heures_totales': heures,
      'heures_restantes': heures,
      'date_expiration': Timestamp.fromDate(dateExpiration),
      'actif': true,
      'created_at': Timestamp.fromDate(now),  // ‚Üê CORRIG√â
    });

    print('‚úÖ VOUCHER: Cr√©√© avec ID ${docRef.id}');
    return docRef.id;
  } catch (e) {
    print('‚ùå VOUCHER ERROR: $e');
    throw Exception('Erreur cr√©ation voucher: $e');
  }
}
  // ========================================
  // ADMIN: Liste tous les vouchers
  // ========================================
  Stream<List<Voucher>> getAllVouchers() {
    print('üîµ VOUCHER: Stream tous les vouchers');

    return _firestore
        .collection(_collection)
        .orderBy('created_at', descending: true)
        .snapshots()
        .map((snapshot) {
      print('‚úÖ VOUCHER: ${snapshot.docs.length} vouchers');
      return snapshot.docs.map((doc) {
        final data = doc.data();
        return Voucher.fromMap({
          ...data,
          'date_expiration': (data['date_expiration'] as Timestamp)
              .toDate()
              .toIso8601String(),
          'created_at': data['created_at'] != null
              ? (data['created_at'] as Timestamp).toDate().toIso8601String()
              : DateTime.now().toIso8601String(),
        }, doc.id);
      }).toList();
    });
  }

  // ========================================
  // ADMIN: Modifier heures restantes
  // ========================================
  Future<void> updateVoucherHeures(String id, int nouvellesHeures) async {
    try {
      print('üîµ VOUCHER: Mise √† jour heures $id ‚Üí $nouvellesHeures');

      await _firestore.collection(_collection).doc(id).update({
        'heures_restantes': nouvellesHeures,
        'actif': nouvellesHeures > 0,
      });

      print('‚úÖ VOUCHER: Heures mises √† jour');
    } catch (e) {
      print('‚ùå VOUCHER ERROR: $e');
      throw Exception('Erreur mise √† jour: $e');
    }
  }

  // ========================================
  // ADMIN: Activer/D√©sactiver un voucher
  // ========================================
  Future<void> toggleVoucherStatus(String id, bool actif) async {
    try {
      print('üîµ VOUCHER: Toggle status $id ‚Üí $actif');

      await _firestore.collection(_collection).doc(id).update({
        'actif': actif,
      });

      print('‚úÖ VOUCHER: Statut chang√©');
    } catch (e) {
      print('‚ùå VOUCHER ERROR: $e');
      throw Exception('Erreur changement statut: $e');
    }
  }

  // ========================================
  // ADMIN: Supprimer un voucher
  // ========================================
  Future<void> deleteVoucher(String id) async {
    try {
      print('üîµ VOUCHER: Suppression $id');

      await _firestore.collection(_collection).doc(id).delete();

      print('‚úÖ VOUCHER: Supprim√©');
    } catch (e) {
      print('‚ùå VOUCHER ERROR: $e');
      throw Exception('Erreur suppression: $e');
    }
  }

  // ========================================
  // CLIENT: Valider un code voucher
  // ========================================
  Future<Voucher?> validateVoucherCode(String code) async {
    try {
      print('üîµ VOUCHER: Validation code $code');

      final snapshot = await _firestore
          .collection(_collection)
          .where('code', isEqualTo: code.toUpperCase())
          .limit(1)
          .get();

      if (snapshot.docs.isEmpty) {
        print('‚ö†Ô∏è VOUCHER: Code introuvable');
        return null;
      }

      final doc = snapshot.docs.first;
      final data = doc.data();

      final voucher = Voucher.fromMap({
        ...data,
        'date_expiration':
            (data['date_expiration'] as Timestamp).toDate().toIso8601String(),
        'created_at': data['created_at'] != null
            ? (data['created_at'] as Timestamp).toDate().toIso8601String()
            : DateTime.now().toIso8601String(),
      }, doc.id);

      print('‚úÖ VOUCHER: Trouv√© - ${voucher.heuresRestantes}h restantes');
      return voucher;
    } catch (e) {
      print('‚ùå VOUCHER ERROR: $e');
      return null;
    }
  }

// ========================================
  // SYSTEM: D√©cr√©menter heures (appel√© lors confirmation r√©servation)
  // ========================================
  Future<void> useVoucherHours(String voucherId, int heures) async {
    try {
      print('üîµ VOUCHER: Utilisation $heures heures du voucher $voucherId');

      final doc = await _firestore.collection(_collection).doc(voucherId).get();

      if (!doc.exists) {
        print('‚ùå VOUCHER: Document $voucherId introuvable');
        throw Exception('Voucher introuvable');
      }

      print('üîµ VOUCHER: Document trouv√©');
      
      final data = doc.data()!;
      final currentHeures = data['heures_restantes'] as int;
      
      print('üîµ VOUCHER: Heures actuelles = $currentHeures');
      print('üîµ VOUCHER: Heures √† d√©duire = $heures');
      
      final newHeures = currentHeures - heures;
      
      print('üîµ VOUCHER: Nouvelles heures = $newHeures');

      if (newHeures < 0) {
        print('‚ö†Ô∏è VOUCHER: Heures insuffisantes ($currentHeures - $heures = $newHeures)');
        throw Exception('Heures insuffisantes sur le voucher');
      }

      print('üîµ VOUCHER: Mise √† jour Firestore...');
      
      await _firestore.collection(_collection).doc(voucherId).update({
        'heures_restantes': newHeures,
        'actif': newHeures > 0,
      });

      print('‚úÖ VOUCHER: $heures heures utilis√©es, reste $newHeures heures');
    } catch (e) {
      print('‚ùå VOUCHER ERROR: $e');
      throw Exception('Erreur utilisation voucher: $e');
    }
  }
}
